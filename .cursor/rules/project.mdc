---
description: OCFitShit - Internal Fitness Competition Tracker
globs: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"]
alwaysApply: true
---
# .cursorrules

PROJECT OVERVIEW:
This is a modern internal fitness competition tracker built with Next.js 15 App Router, React 19, and Tailwind CSS 4. The project uses ShadCN UI for components, Clerk for authentication, Drizzle ORM with PostgreSQL, and tRPC for typed backend APIs. Deployed via Vercel. Scripts run via Bun.

---

TECHNOLOGY VERSIONS:
- React 19
- Next.js 15 (App Router only)
- Tailwind CSS 4
- TypeScript 5.8+
- Bun (mandatory runtime)
- Drizzle ORM 0.41+
- Biome 1.9+ for formatting and linting

---

🏛️ STRUCTURE AWARENESS & BEST PRACTICES:
- Always understand and respect folder structure:
  - `/src/app` → App Router pages/layouts
  - `/src/components` → Shared UI
  - `/src/server/api` → tRPC routes
  - `/src/server/db` → Drizzle schemas and queries
  - `/src/lib` → Utilities/helpers
  - `/src/types` → Global/shared types
- Always suggest the most _idiomatic_ and _modern_ place for new files or logic
- Never suggest writing logic inline in components — extract and reuse
- If in doubt, simulate how a top open-source repo might do it

---

🧠 MODERN DEVELOPMENT GUIDANCE (GOOGLE/BEST-PRACTICE AWARENESS):
- Always apply modern best practices (as if you Googled for “best way to…”)
- Choose up-to-date, community-validated methods
- Avoid deprecated or old patterns (e.g., class components, legacy context API)
- Prefer built-in tools (e.g., `useFormState` over external libs unless justified)
- Compare patterns to latest usage in open-source apps like Vercel, Supabase, etc.

---

🎨 MODERN UI/UX RULES:
- Follow modern UX patterns — spacing, contrast, accessibility, animations
- Use responsive design everywhere
- Use motion/animation for feedback (e.g., `framer-motion`, `tw-animate-css`)
- Use ShadCN UI as base and override to match branding
- Accessibility is required (`aria`, keyboard nav, screen reader)
- Prefer skeletons/loaders over spinners
- Form UX: always include error states, focus ring, labels, helper text

---

🧼 TAILWIND STYLING:
- Always use utility-first Tailwind CSS
- Use `cn()` utility for conditional classes
- No inline `style={{}}`
- Extract duplicated classnames into components or helpers
- Use variant-based styling patterns (`class-variance-authority` or similar)

---

🧾 TYPESCRIPT RULES:
- Use `interface` for public props, `type` for unions or mapped types
- Never use `any`
- Use inference where appropriate
- All props must be explicitly typed
- No untyped API responses

---

🔐 AUTHENTICATION (CLERK):
- Use Clerk middleware for route protection
- Link `clerkId` to internal `user` schema
- Store additional user data in DB, not in Clerk metadata
- Use `ClerkProvider` in root layout only

---

🗂️ API LAYER:
- All APIs must go through tRPC
- Organize tRPC routers by domain/feature
- Validate inputs with Zod schemas
- Use protected procedures for private data
- Wrap multi-step updates in `db.transaction`

---

🧬 DATABASE:
- Use Drizzle ORM exclusively
- All schema changes require `drizzle-kit generate:pg` + migration
- Never mutate multiple tables without a transaction
- Respect foreign key relationships
- Use `defaultNow()` for timestamps
- Prefer enums over free-text status fields

---

🕹️ GAMIFICATION:
- Level = `Math.floor(points / 100) + 1`
- `pointsForNextLevel = level * 100`
- Badge awards trigger visual feedback (e.g., confetti animation)
- Include timestamped badge awards (`earnedAt`)
- Leaderboard must be paginated, searchable, and accessible

---

📊 VISUALIZATION:
- Use Chart.js via `react-chartjs-2`
- All charts must be responsive
- Provide filtering controls (date range, type)
- Use consistent color scales
- Data fetches should be cached and error-resilient

---

🧪 TESTING:
- Unit test all utility functions
- Component tests for all UI
- Integration tests for flows like login → dashboard → points update
- Accessibility tests required (can use `@axe-core/react`)
- Prefer Bun-compatible testing libs (e.g., `vitest`, `uvu`, `jest-lite`)

---

🚀 PERFORMANCE:
- Use `React.memo` or `useMemo` for expensive renders
- Lazy-load components and images
- Use `next/image` with proper sizing
- Avoid client components unless needed
- Prefer server components and streaming when possible

---

🛠️ TOOLING & COMMANDS:
- Format: `biome format . --write`
- Lint: `biome check .`
- Scripts must be executed via `bun`, not `npm` or `yarn`
- No package installs without discussion
- Use `.env` for all secrets — never hardcode

---

🤖 AI-SPECIFIC BEHAVIOR:
- Always prefer modern patterns and structure
- When uncertain, simulate searching GitHub/Google for best practice
- Ask for clarification on vague logic
- Don’t hallucinate — suggest from known good sources
- Never overwrite whole files unless absolutely needed
- Never write code that breaks the project’s structure or architectural rules

---

RUN:
Use `bun` for all scripts. Never use `npm` or `yarn`.

